// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider  = "postgresql"
    url       = env("DATABASE_URL")
    directUrl = env("DIRECT_URL")
}

model User {
    id              Int      @id @default(autoincrement())
    email           String   @unique
    username        String
    passwordHash    String
    emailIsVerified Boolean  @default(false)
    recoveryCode    Bytes
    createdAt       DateTime @default(now())

    passwordResetSessions     PasswordResetSession[]
    emailVerificationRequests EmailVerificationRequest[]
    sessions                  Session[]
    Blog                      Blog[]

    @@map("users")
}

// model Role {
//     id          Int    @id @default(autoincrement())
//     name        String @unique
//     description String
// }

// model Permission {
//     id     Int    @id @default(autoincrement())
//     name   String @unique
//     entity String
// }

model Session {
    id        String   @id
    userId    Int
    expiresAt DateTime
    // twoFactorIsVerified Boolean  @default(false)

    user User @relation(references: [id], fields: [userId], onDelete: Cascade)

    @@map("sessions")
}

model EmailVerificationRequest {
    id        String   @id
    userId    Int
    email     String
    code      String
    expiresAt DateTime

    user User @relation(references: [id], fields: [userId], onDelete: Cascade)

    @@map("email_verification_requests")
}

model PasswordResetSession {
    id              String   @id
    userId          Int
    email           String
    code            String
    expiresAt       DateTime
    emailIsVerified Boolean  @default(false)
    // twoFactorIsVerified Boolean  @default(false)

    user User @relation(references: [id], fields: [userId], onDelete: Cascade)

    @@map("password_reset_sessions")
}

model Member {
    id          String  @id @default(cuid())
    slug        String  @unique
    order       Int // order position in Members page, carousel, etc..
    name        String
    imageUrl    String
    linkedInUrl String?
    email       String?
    role        String

    @@map("members")
}

model Translation {
    id         Int    @id @default(autoincrement())
    language   String // 'en' or 'id', etc.
    key        String // 'position', 'degree', 'bio', 'description', etc.
    value      String // The translated text
    entityId   String // Could be the ID of any model needing translation
    entityType String // Specifies the type, e.g., 'Member' or 'Blog'

    @@unique([entityId, entityType, language, key]) // ensures each combination of entityId, entittyType, language, and key in the Translation model is unique.
    @@index([entityId, entityType]) // for filtering by entity and type
    @@index([key]) // for filtering by key
    @@index([language]) // for filtering by language
    @@map("translations")
}

model PracticeArea {
    id       String @id @default(cuid())
    slug     String @unique
    imageUrl String
    order    Int // order position in practice-areas page, carousel, etc..

    @@map("practice_areas")
}

model Achievements {
    id       String @id @default(cuid())
    imageUrl String
    order    Int    @unique // order position in practice-areas page, carousel, etc..

    @@map("achievements")
}

model Blog {
    id String @id @default(cuid())

    author   User   @relation(fields: [authorId], references: [id], onDelete: Cascade)
    imageUrl String
    imageKey String

    authorId  Int
    createdAt DateTime @default(now())

    @@map("blogs")
}
